name: Initialize Fork

on:
  create:
    branches: [main]
  issue_comment:
    types: [created]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.ref }}
  cancel-in-progress: false

# Prevent workflow from running if workflow.env exists
jobs:
  check_env_file:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Check initialization status
        id: check
        run: |
          # Check for workflow.env first
          if [ -f ".github/workflow.env" ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # If no workflow.env, check if all branches exist
          if git rev-parse --verify origin/main >/dev/null 2>&1 && \
             git rev-parse --verify origin/fork_upstream >/dev/null 2>&1 && \
             git rev-parse --verify origin/fork_integration >/dev/null 2>&1; then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  create_init_issue:
    needs: check_env_file
    if: needs.check_env_file.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    outputs:
      is_initialized: ${{ steps.check_init.outputs.is_initialized }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check Initialization Status
        id: check_init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Comprehensive initialization check
          IS_INITIALIZED=false
          
          # Check for workflow.env first
          if [ -f ".github/workflow.env" ]; then
            IS_INITIALIZED=true
          else
            # If no workflow.env, check if all branches exist and are protected
            if git rev-parse --verify origin/main >/dev/null 2>&1 && \
               git rev-parse --verify origin/fork_upstream >/dev/null 2>&1 && \
               git rev-parse --verify origin/fork_integration >/dev/null 2>&1; then
              # Check for branch protection
              if gh api "/repos/${{ github.repository }}/branches/main/protection" --silent; then
                IS_INITIALIZED=true
              fi
            fi
          fi
          
          echo "is_initialized=$IS_INITIALIZED" >> $GITHUB_OUTPUT
          
          # Only proceed with issue creation if not initialized
          if [ "$IS_INITIALIZED" = "true" ]; then
            echo "Repository is already initialized"
            exit 0
          fi
          
          # Check if initialization issue already exists
          ISSUE_COUNT=$(gh issue list --label "initialization" --json number --jq 'length')
          if [ "$ISSUE_COUNT" != "0" ]; then
            echo "Initialization issue already exists"
            exit 0
          fi
          
          echo "proceed=true" >> $GITHUB_OUTPUT

      - name: Create Label
        if: steps.check_init.outputs.proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh label create initialization \
            --description "Issues related to repository initialization" \
            --color "0366d6" || true
          
      - name: Create Initialization Issue
        if: steps.check_init.outputs.proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "ðŸš€ Repository Initialization Required" \
            --body-file .github/ISSUE_TEMPLATE/init-request.md \
            --label "initialization"

  check_comment:
    needs: [create_init_issue]
    if: github.event_name == 'issue_comment' && needs.create_init_issue.outputs.is_initialized != 'true'
    runs-on: ubuntu-latest
    outputs:
      upstream_repo: ${{ steps.get_repo.outputs.repo }}
    permissions:
      issues: write
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Process Comment
        id: get_repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Only process comments on initialization issues
          if ! gh issue view ${{ github.event.issue.number }} --json labels -q '.labels[].name' | grep -q "initialization"; then
            echo "Not an initialization issue, skipping"
            exit 0
          fi
          
          # Get the comment body
          COMMENT="${{ github.event.comment.body }}"
          
          # Trim whitespace
          REPO=$(echo "$COMMENT" | tr -d '[:space:]')
          
          # Validate repository format
          if [[ "$REPO" == http* ]]; then
            # GitLab URL format validation
            if ! [[ "$REPO" =~ ^https?://[^/]+/[^/]+/[^/]+(/[^/]+)*$ ]]; then
              echo "Invalid GitLab URL format"
              cat .github/ISSUE_TEMPLATE/init-error.md | \
                sed "s|{{comment}}|$REPO|g" | \
                gh issue comment "${{ github.event.issue.number }}" --body-file -
              exit 1
            fi
          else
            # GitHub owner/repo format validation
            if ! [[ "$REPO" =~ ^[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+$ ]]; then
              echo "Invalid GitHub repository format"
              cat .github/ISSUE_TEMPLATE/init-error.md | \
                sed "s|{{comment}}|$REPO|g" | \
                gh issue comment "${{ github.event.issue.number }}" --body-file -
              exit 1
            fi
          fi
          
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          
          # Post confirmation comment
          cat .github/ISSUE_TEMPLATE/init-started.md | \
            sed "s|{{upstream_repo}}|$REPO|g" | \
            gh issue comment "${{ github.event.issue.number }}" --body-file -

  setup:
    runs-on: ubuntu-latest
    needs: [check_comment]
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      issues: write
      actions: write
    continue-on-error: true
      
    steps:
      - name: Check if setup should proceed
        id: check_setup
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]] && [[ -n "${{ needs.check_comment.outputs.upstream_repo }}" ]]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.check_setup.outputs.should_proceed == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.PAT_TOKEN }}
          
      - name: Configure Git
        if: steps.check_setup.outputs.should_proceed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config pull.rebase false  # Use merge strategy
          
      - name: Configure Upstream
        if: steps.check_setup.outputs.should_proceed == 'true'
        id: upstream_config
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Get upstream repo from comment
          UPSTREAM_REPO="${{ needs.check_comment.outputs.upstream_repo }}"
          
          # Convert to URL format
          if [[ "$UPSTREAM_REPO" == http* ]]; then
            REPO_URL="$UPSTREAM_REPO.git"
          else
            REPO_URL="https://github.com/$UPSTREAM_REPO.git"
          fi
          
          # Add upstream remote
          git remote add upstream $REPO_URL
          
          # Fetch everything from upstream
          git fetch upstream --prune --tags
          
          # Try to determine the default branch
          if git rev-parse --verify upstream/main >/dev/null 2>&1; then
            DEFAULT_BRANCH="main"
          elif git rev-parse --verify upstream/master >/dev/null 2>&1; then
            DEFAULT_BRANCH="master"
          else
            echo "::error::Could not find main or master branch in upstream repository"
            exit 1
          fi
          
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "::notice::Using upstream branch: $DEFAULT_BRANCH"

      - name: Disable Security Features
        if: steps.check_setup.outputs.should_proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Temporarily disable security features to allow fork creation
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}" \
            --input .github/security-off.json
          
          # Wait a moment for the changes to take effect
          sleep 10

      - name: Setup Branches
        if: steps.check_setup.outputs.should_proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Configure Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Copy security patterns to runner temp location before switching branches
          cp .github/security-patterns.txt "$RUNNER_TEMP/security-patterns.txt"
          
          # 1. Create fork_upstream from upstream's default branch
          git checkout -b fork_upstream upstream/$DEFAULT_BRANCH
          
          # Store remote URLs before cleaning
          UPSTREAM_URL=$(git remote get-url upstream)
          ORIGIN_URL=$(git remote get-url origin)
          
          # Clean the history before pushing
          # Install git-filter-repo
          sudo apt-get update && sudo apt-get install -y git-filter-repo
          
          # First analyze the repo to find potential secrets
          git filter-repo --analyze
          
          # First pass: Replace content matching patterns with [REMOVED]
          git filter-repo \
            --replace-text "$RUNNER_TEMP/security-patterns.txt" \
            --force
          
          # Second pass: Remove sensitive files and paths
          git filter-repo \
            --invert-paths \
            --path-glob '*secret*' \
            --path-glob '*credential*' \
            --path-glob '*password*' \
            --path-glob '*token*' \
            --path-glob '*key*' \
            --path-glob '*auth*' \
            --path-glob '*oauth*' \
            --path-glob '*cert*' \
            --path-glob '*.env*' \
            --path-glob '*.pem' \
            --path-glob '*.key' \
            --path-glob '*.p12' \
            --path-glob '*.pfx' \
            --path-glob '*.pkcs12' \
            --path-glob '*id_rsa*' \
            --path-glob '*id_dsa*' \
            --path-glob '*id_ecdsa*' \
            --path-glob '*id_ed25519*' \
            --path-glob '*.keystore' \
            --path-glob '*.jks' \
            --path-glob 'secrets.*' \
            --path-glob 'credentials.*' \
            --path-glob 'connections.*' \
            --force
            
          # Clean up temporary file
          rm "$RUNNER_TEMP/security-patterns.txt"
          
          # Restore remotes after cleaning
          git remote add origin $ORIGIN_URL || true
          git remote add upstream $UPSTREAM_URL || true
          
          # Configure remotes with authentication
          git remote set-url origin "https://$GITHUB_TOKEN@github.com/${{ github.repository }}.git"
          git remote set-url upstream "https://$GITHUB_TOKEN@github.com/$UPSTREAM_URL"
          
          # Push cleaned branch with force
          git push -f origin fork_upstream
          
          # 2. Create fork_integration and setup
          git checkout -b fork_integration fork_upstream
          
          # Add workflow env file
          mkdir -p .github
          echo "INITIALIZATION_COMPLETE=true" > .github/workflow.env
          
          # Copy cleaned-up workflows and dependabot config from main
          git checkout main -- .github/workflows/validate.yml \
                              .github/workflows/release.yml \
                              .github/workflows/sync.yml \
                              .github/dependabot.yml || true
          
          # Commit and push changes to fork_integration
          git add .github
          git commit -m "chore: add workflow environment file, dependabot config, and cleaned-up workflows"
          git push origin fork_integration
          
          # 3. Merge fork_integration into main with improved strategy
          echo "Merging fork_integration into main..."
          
          # Fetch and reset main to match remote
          git fetch origin main
          git checkout main
          git reset --hard origin/main
          
          # Attempt merge with unrelated histories, preferring integration changes
          if ! git merge fork_integration --allow-unrelated-histories -X theirs; then
            echo "Merge conflicts detected, resolving in favor of integration branch..."
            # If there are still conflicts, explicitly take integration branch version
            git status --porcelain | grep -E '^(DD|AU|UD|UA|DU|AA|UU)' | cut -c4- | while read -r file; do
              echo "Resolving conflict in $file..."
              git checkout --theirs "$file"
              git add "$file"
            done
            git commit -m "chore: merge fork_integration into main, resolving conflicts with integration changes"
          fi
          
          # Force push the merged changes since we want integration changes to take precedence
          git push -f origin main

      - name: Re-enable Security Features
        if: steps.check_setup.outputs.should_proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Re-enable security features
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}" \
            --input .github/security-on.json

          # Wait a moment for the changes to take effect
          sleep 10

      - name: Store Upstream URL
        if: steps.check_setup.outputs.should_proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Get upstream repo from comment
          UPSTREAM_REPO="${{ needs.check_comment.outputs.upstream_repo }}"
          
          # Convert to URL format
          if [[ "$UPSTREAM_REPO" == http* ]]; then
            REPO_URL="$UPSTREAM_REPO.git"
          else
            REPO_URL="https://github.com/$UPSTREAM_REPO.git"
          fi
          
          # Store using gh secret set command
          echo "$REPO_URL" | gh secret set UPSTREAM_REPO_URL

      - name: Create Labels
        if: steps.check_setup.outputs.should_proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Create initialization label if it doesn't exist
          gh label create initialization \
            --description "Issues related to repository initialization" \
            --color "0366d6" || true

      - name: Configure Branch Protection
        if: steps.check_setup.outputs.should_proceed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Configure branch protection for main
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}/branches/main/protection" \
            --input .github/branch-protection.json

          # Configure branch protection for fork_upstream
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}/branches/fork_upstream/protection" \
            --input .github/branch-protection.json

          # Configure branch protection for fork_integration
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}/branches/fork_integration/protection" \
            --input .github/branch-protection.json

      - name: Cleanup Templates
        if: steps.check_setup.outputs.should_proceed == 'true' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Temporarily disable branch protection
          gh api \
            --method DELETE \
            "/repos/${{ github.repository }}/branches/main/protection"
            
          # Make sure we have latest main
          git fetch origin main
          git checkout main
          git pull origin main

          # Read PR template before deleting
          PR_BODY=$(cat .github/PULL_REQUEST_TEMPLATE/cleanup-pr.md)

          # Create a cleanup branch from latest main
          git checkout -b chore/cleanup-init

          # Remove initialization-related files and directories
          rm -rf .github/ISSUE_TEMPLATE/
          rm -f .github/PULL_REQUEST_TEMPLATE/init-pr.md
          rm -f .github/PULL_REQUEST_TEMPLATE/cleanup-pr.md
          rm -f .github/workflows/init.yml
          rm -f .github/workflows/init-complete.yml
          rm -f .github/branch-protection.json
          rm -f .github/security-on.json
          rm -f .github/security-off.json
          rm -f .github/security-patterns.txt
          rm -rf .cursor/

          # Commit and push changes
          git add -A
          git commit -m "chore: cleanup initialization files and templates"
          git push -u origin chore/cleanup-init

          # Create PR using the stored cleanup template content
          PR_URL=$(gh pr create \
            --title "chore: cleanup initialization files and templates" \
            --body "$(printf "Closes #${{ github.event.issue.number }}\n\n%s" "$PR_BODY")" \
            --base main \
            --head chore/cleanup-init)

          # Extract PR number for later use
          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

          # Add PR review request comment
          (
            echo "### Required Action: Review Cleanup PR"
            echo "A pull request has been created to remove initialization files: #$PR_NUMBER"
            echo -e "\nPlease:"
            echo "1. Review the changes in the PR"
            echo "2. Approve the PR if the changes look correct"
            echo "3. Merge the PR once approved"
            echo -e "\nThis will complete the initialization process."
          ) | gh issue comment "${{ github.event.issue.number }}" --body-file -
            